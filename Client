{
  "name": "jmd-billing-client",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.0",
    "vite": "^4.4.9"
  }
}
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173
  }
})
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './styles.css'

createRoot(document.getElementById('root')).render(<App />)
import React from 'react'
import InvoiceForm from './components/InvoiceForm'
import InvoiceList from './components/InvoiceList'

export default function App() {
  return (
    <div className="app">
      <header>
        <h1>JMD Ayurveda — Billing</h1>
      </header>
      <main>
        <div className="col">
          <InvoiceForm />
        </div>
        <div className="col">
          <InvoiceList />
        </div>
      </main>
    </div>
  )
}
import React, { useState } from 'react'
import { createInvoice } from '../api'

function emptyItem() {
  return { desc: '', qty: 1, rate: 0 };
}

export default function InvoiceForm() {
  const [number, setNumber] = useState('INV' + Date.now());
  const [date, setDate] = useState(new Date().toISOString().slice(0,10));
  const [customerName, setCustomerName] = useState('');
  const [customerAddress, setCustomerAddress] = useState('');
  const [customerGst, setCustomerGst] = useState('');
  const [items, setItems] = useState([ emptyItem() ]);
  const [gstPercent, setGstPercent] = useState(18);
  const [message, setMessage] = useState('');

  function updateItem(i, key, val) {
    const copy = [...items];
    copy[i][key] = key === 'desc' ? val : Number(val);
    setItems(copy);
  }

  function addItem() {
    setItems([...items, emptyItem()]);
  }
  function removeItem(i) {
    setItems(items.filter((_,idx)=>idx!==i));
  }

  async function onSubmit(e) {
    e.preventDefault();
    const payload = {
      number,
      date,
      customer_name: customerName,
      customer_address: customerAddress,
      customer_gst: customerGst,
      items,
      gst_percent: Number(gstPercent)
    };
    setMessage('Generating invoice...');
    try {
      const res = await createInvoice(payload);
      if (res && res.id) {
        setMessage('Invoice created. Download: ' + window.location.origin.replace(/:[0-9]+$/,'') + '/invoices/' + res.id + '.pdf');
        // Open in new tab
        const pdfUrl = (import.meta.env.VITE_API_BASE || 'http://localhost:4000') + '/invoices/' + res.id + '.pdf';
        window.open(pdfUrl, '_blank');
      } else {
        setMessage('Error creating invoice');
      }
    } catch (err) {
      setMessage('Server error: ' + err.message);
    }
  }

  const subtotal = items.reduce((s,it)=> s + (it.qty*it.rate), 0);
  const gstAmount = subtotal * Number(gstPercent) / 100;
  const total = subtotal + gstAmount;

  return (
    <div className="card">
      <h2>Create Invoice</h2>
      <form onSubmit={onSubmit}>
        <label>Invoice Number
          <input value={number} onChange={e=>setNumber(e.target.value)} />
        </label>
        <label>Date
          <input type="date" value={date} onChange={e=>setDate(e.target.value)} />
        </label>
        <label>Customer Name
          <input value={customerName} onChange={e=>setCustomerName(e.target.value)} required/>
        </label>
        <label>Customer Address
          <textarea value={customerAddress} onChange={e=>setCustomerAddress(e.target.value)} />
        </label>
        <label>Customer GSTIN (optional)
          <input value={customerGst} onChange={e=>setCustomerGst(e.target.value)} />
        </label>

        <div className="items">
          <h3>Items</h3>
          {items.map((it, i) => (
            <div className="item-row" key={i}>
              <input placeholder="Description" value={it.desc} onChange={e=>updateItem(i,'desc', e.target.value)} />
              <input type="number" min="1" value={it.qty} onChange={e=>updateItem(i,'qty', e.target.value)} />
              <input type="number" min="0" value={it.rate} onChange={e=>updateItem(i,'rate', e.target.value)} />
              <button type="button" onClick={()=>removeItem(i)} disabled={items.length===1}>Remove</button>
            </div>
          ))}
          <button type="button" onClick={addItem}>Add Item</button>
        </div>

        <label>GST Percent
          <select value={gstPercent} onChange={e=>setGstPercent(e.target.value)}>
            <option value={0}>0 (No GST)</option>
            <option value={5}>5%</option>
            <option value={12}>12%</option>
            <option value={18}>18%</option>
            <option value={28}>28%</option>
          </select>
        </label>

        <div className="summary">
          <p>Subtotal: ₹ {subtotal.toFixed(2)}</p>
          <p>GST: ₹ {gstAmount.toFixed(2)}</p>
          <p><b>Total: ₹ {total.toFixed(2)}</b></p>
        </div>

        <button type="submit">Generate Invoice & PDF</button>
      </form>

      {message && <p className="message">{message}</p>}
    </div>
  );
}
import React, { useEffect, useState } from 'react'
import { listInvoices } from '../api'

export default function InvoiceList() {
  const [list, setList] = useState([]);
  useEffect(()=> {
    fetchList();
    const t = setInterval(fetchList, 5000);
    return ()=> clearInterval(t);
  },[]);
  async function fetchList() {
    try {
      const data = await listInvoices();
      setList(data);
    } catch(err) {
      console.error(err);
    }
  }
  return (
    <div className="card">
      <h2>Invoices</h2>
      <table className="invoices-table">
        <thead>
          <tr><th>#</th><th>Invoice</th><th>Customer</th><th>Date</th><th>Total</th><th>PDF</th></tr>
        </thead>
        <tbody>
          {list.map((r, i) => (
            <tr key={r.id}>
              <td>{i+1}</td>
              <td>{r.number}</td>
              <td>{r.customer_name}</td>
              <td>{r.date}</td>
              <td>₹ {Number(r.total).toFixed(2)}</td>
              <td><a target="_blank" rel="noreferrer" href={`http://localhost:4000/invoices/${r.id}.pdf`}>Download</a></td>
            </tr>
          ))}
          {list.length===0 && <tr><td colSpan="6">No invoices yet</td></tr>}
        </tbody>
      </table>
    </div>
  )
}
body { font-family: Arial, sans-serif; margin: 0; background:#f5f6fb; }
.app header { background:#0b5ed7; color:white; padding:12px 20px; }
.app header h1 { margin:0; font-size:18px; }
main { display:flex; gap:16px; padding:20px; }
.col { flex:1; }
.card { background:white; padding:16px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.06); }
label { display:block; margin:8px 0; font-size:13px; }
input, textarea, select { width:100%; padding:8px; margin-top:4px; box-sizing:border-box; border:1px solid #ddd; border-radius:4px; }
button { background:#198754; color:white; padding:8px 12px; border:none; border-radius:4px; cursor:pointer; }
.items .item-row { display:flex; gap:8px; margin-bottom:8px; }
.items .item-row input { flex:1; min-width:0; }
.summary p { margin:4px 0; }
.invoices-table { width:100%; border-collapse:collapse; margin-top:8px }
.invoices-table th, .invoices-table td { border:1px solid #eee; padding:8px; text-align:left; font-size:13px; }
.message { margin-top:8px; color:#0a58ca }
node_modules/
server/billing.db
server/invoices/
client/node_modules/
.env
# JMD Ayurveda Billing (Fullstack)

## Setup

### 1) Server
Server runs on `http://localhost:4000`

### 2) Client
Client runs on `http://localhost:5173`

Open the client, create invoices; PDFs will be saved in `server/invoices` and served at `http://localhost:4000/invoices/<id>.pdf`.
